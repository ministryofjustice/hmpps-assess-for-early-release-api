version: 2.1
orbs:
  hmpps: ministryofjustice/hmpps@10
parameters:
  releases-slack-channel:
    type: string
    default: the_elephants_devs
  java-version:
    type: string
    default: "21.0"
  localstack-version:
    type: string
    default: "3.0.2"
  postgres-version:
    type: string
    default: "16.1"
jobs:
  validate:
    executor:
      name: hmpps/java_postgres
      jdk_tag: << pipeline.parameters.java-version >>
      postgres_tag: << pipeline.parameters.postgres-version >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew detekt check
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests

  generate_database_schema:
    executor:
      name: java_postgres
      jdk_tag: "21.0"
      postgres_tag: "16.1"
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-version >>
      - image: localstack/localstack:<< pipeline.parameters.localstack-version >>
        environment:
          - SERVICES: sns,sqs
          - ES_PORT_EXTERNAL: 4571
          - DEBUG: ${DEBUG- }
          - DOCKER_HOST: unix:///var/run/docker.sock
          - AWS_EXECUTION_ENV: True
          - PERSISTENCE: 1
      - image: postgres:<< pipeline.parameters.postgres-version >>
        environment:
          - POSTGRES_USER: afer
          - POSTGRES_PASSWORD: dummy
          - POSTGRES_DB: afer-test-db
          - PGPORT: 5433
    steps:
      - checkout
      - run:
          name: Install schemaspy
          command: curl -L https://github.com/schemaspy/schemaspy/releases/download/v<< 6.2.4 >>/schemaspy-<< 6.2.4 >>.jar --output /tmp/schemaspy.jar
      - run:
          name: Install postgres jdbc driver
          command: curl -L https://jdbc.postgresql.org/download/postgresql-<< 42.7.3 >>.jar --output /tmp/postgres-driver.jar
      - run:
          name: Execute a command to initialise the database schema
          command: ./gradlew initialiseDatabaseTest
      - run:
          name: Generate database schema report
          command: |
            java -jar /tmp/schemaspy.jar \
              -t pgsql \
              -dp /tmp/postgres-driver.jar \
              -db  afer-test-db \
              -host localhost \
              -port 5432 \
              -s afer-test-db \
              -vizjs \
              -u afer \
              -p dummy \
              -o /tmp/schemaspy
      - run:
          name: generate index file
          command: |
            echo '<html><head><meta http-equiv="refresh" content="0; url=report/index.html" /></head><body><a href="report/index.html">Open Schema Report</a></body></html>' > /tmp/index.html
      - store_artifacts:
          path: /tmp/index.html
          destination: schema/index.html
      - store_artifacts:
          path: /tmp/schemaspy
          destination: schema/report

  integration-test:
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-version >>
      - image: localstack/localstack:<< pipeline.parameters.localstack-version >>
        environment:
          - SERVICES: sns,sqs
          - ES_PORT_EXTERNAL: 4571
          - DEBUG: ${DEBUG- }
          - DOCKER_HOST: unix:///var/run/docker.sock
          - AWS_EXECUTION_ENV: True
          - PERSISTENCE: 1
      - image: postgres:<< pipeline.parameters.postgres-version >>
        environment:
          - POSTGRES_USER: afer
          - POSTGRES_PASSWORD: dummy
          - POSTGRES_DB: afer-test-db
          - PGPORT: 5433
    steps:
      - run:
          command: |
            while true; do
              sleep 5
              ps auxwwf
              echo "======"
            done
          background: true
      - checkout
      - hmpps/wait_till_ready_postgres:
          port: 5433
      - hmpps/wait_till_ready
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew integrationTest

      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - generate_database_schema:
          filters:
            tags:
              ignore: /.*/
      - validate:
          filters:
            tags:
              ignore: /.*/
      - integration-test:
          filters:
            tags:
              ignore: /.*/
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_multiplatform_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - validate
            - integration-test
            - build_docker
            - helm_lint
          helm_timeout: 5m
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          jira_update: true
          jira_env_type: staging
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-assess-for-early-release-api-preprod
          requires:
            - request-preprod-approval
          helm_timeout: 5m
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          jira_update: true
          jira_env_type: production
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - hmpps-assess-for-early-release-api-prod
          requires:
            - request-prod-approval
          helm_timeout: 5m
