version: 2.1
orbs:
  hmpps: ministryofjustice/hmpps@10

  test-orb:
    orbs:
      hmpps: ministryofjustice/hmpps@10

    parameters:
      jdk-version:
        type: string
        default: "21.0"
      localstack-version:
        type: string
        default: "3.0.2"
      postgres-version:
        type: string
        default: "16.1"

    executors:
      default_executor:
        docker:
          - image: cimg/openjdk:<< pipeline.parameters.jdk-version >>
          - image: localstack/localstack:<< pipeline.parameters.localstack-version >>
            environment:
              - SERVICES: sns,sqs
              - ES_PORT_EXTERNAL: 4571
              - DEBUG: ${DEBUG- }
              - DOCKER_HOST: unix:///var/run/docker.sock
              - AWS_EXECUTION_ENV: True
              - PERSISTENCE: 1
          - image: postgres:<< pipeline.parameters.postgres-version >>
            environment:
              - POSTGRES_USER: root
              - POSTGRES_PASSWORD: dev
              - POSTGRES_DB: postgres
        environment:
          _JAVA_OPTIONS: -Xmx512m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.workers.max=1
        working_directory: ~/app
        resource_class: medium

    jobs:
      database_schema_report:
        description: >
          Job to generate a schema report for a postgres database using schemaspy. Runs against postgres in docker
          An HTML report is generated and is available on the artifacts tab of the circleci job

        parameters:
          executor:
            type: executor
            default: default_executor
            description: The executor to use for this job
          initialise_database:
            type: string
            default: "./gradlew check"
            description: A command which will initialise the database schema
          database_name:
            type: string
            default: "postgres"
            description: Name of the database
          host:
            type: string
            default: "localhost"
            description: Host name of the database
          port:
            type: string
            default: "5432"
            description: Port number of the database
          schema:
            type: string
            default: "public"
            description: Schema name
          user:
            type: string
            default: "root"
            description: Database user name
          password:
            type: string
            default: "dev"
            description: Database password
          schemaspy_version:
            type: string
            default: "6.2.4"
            description: Schemaspy version
          postgres_driver_version:
            type: string
            default: "42.7.3"
            description: Postgres driver version

        executor: << parameters.executor >>
        steps:
          - checkout
          - run:
              name: Install schemaspy
              command: curl -L https://github.com/schemaspy/schemaspy/releases/download/v<< parameters.schemaspy_version >>/schemaspy-<< parameters.schemaspy_version >>.jar --output /tmp/schemaspy.jar
          - run:
              name: Install postgres jdbc driver
              command: curl -L https://jdbc.postgresql.org/download/postgresql-<< parameters.postgres_driver_version >>.jar --output /tmp/postgres-driver.jar
          - run:
              name: Execute a command to initialise the database schema
              command: << parameters.initialise_database >>
          - run:
              name: Generate database schema report
              command: |
                java -jar /tmp/schemaspy.jar \
                  -t pgsql \
                  -dp /tmp/postgres-driver.jar \
                  -db  << parameters.database_name >> \
                  -host << parameters.host >> \
                  -port << parameters.port >> \
                  -s << parameters.schema >> \
                  -vizjs \
                  -u << parameters.user >> \
                  -p << parameters.password >> \
                  -o /tmp/schemaspy
          - run:
              name: generate index file
              command: |
                echo '<html><head><meta http-equiv="refresh" content="0; url=report/index.html" /></head><body><a href="report/index.html">Open Schema Report</a></body></html>' > /tmp/index.html
          - store_artifacts:
              path: /tmp/index.html
              destination: schema/index.html
          - store_artifacts:
              path: /tmp/schemaspy
              destination: schema/report

parameters:
  releases-slack-channel:
    type: string
    default: the_elephants_devs
  java-version:
    type: string
    default: "21.0"
  localstack-version:
    type: string
    default: "3.0.2"
  postgres-version:
    type: string
    default: "16.1"

executors:
  my-postgres:
    docker:
      - image: cimg/openjdk:21.0
      - image: localstack/localstack:3.0.2
        environment:
          - SERVICES: sns,sqs
          - ES_PORT_EXTERNAL: 4571
          - DEBUG: ${DEBUG- }
          - DOCKER_HOST: unix:///var/run/docker.sock
          - AWS_EXECUTION_ENV: True
          - PERSISTENCE: 1
      - image: postgres:16.1
        environment:
          - POSTGRES_USER: afer
          - POSTGRES_PASSWORD: dummy
          - POSTGRES_DB: afer-test-db
          - PGPORT: 5433

jobs:
  validate:
    executor:
      name: hmpps/java
      tag: << pipeline.parameters.java-version >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew detekt check
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
  integration-test:
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-version >>
      - image: localstack/localstack:<< pipeline.parameters.localstack-version >>
        environment:
          - SERVICES: sns,sqs
          - ES_PORT_EXTERNAL: 4571
          - DEBUG: ${DEBUG- }
          - DOCKER_HOST: unix:///var/run/docker.sock
          - AWS_EXECUTION_ENV: True
          - PERSISTENCE: 1
      - image: postgres:<< pipeline.parameters.postgres-version >>
        environment:
          - POSTGRES_USER: afer
          - POSTGRES_PASSWORD: dummy
          - POSTGRES_DB: afer-test-db
          - PGPORT: 5433
    steps:
      - run:
          command: |
            while true; do
              sleep 5
              ps auxwwf
              echo "======"
            done
          background: true
      - checkout
      - hmpps/wait_till_ready_postgres:
          port: 5433
      - hmpps/wait_till_ready
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew integrationTest
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - test-orb/database_schema_report:
#          executor: my-postgres
#          database_name: afer-test-db
#          user: afer
#          password: dummy
#          port: "5433"
#          initialise_database: "./gradlew initialiseDatabase"
      - validate:
          filters:
            tags:
              ignore: /.*/
      - integration-test:
          filters:
            tags:
              ignore: /.*/
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_multiplatform_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - validate
            - integration-test
            - build_docker
            - helm_lint
          helm_timeout: 5m
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          jira_update: true
          jira_env_type: staging
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-assess-for-early-release-api-preprod
          requires:
            - request-preprod-approval
          helm_timeout: 5m
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          jira_update: true
          jira_env_type: production
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - hmpps-assess-for-early-release-api-prod
          requires:
            - request-prod-approval
          helm_timeout: 5m